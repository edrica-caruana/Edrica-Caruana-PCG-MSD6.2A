using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class CubeMaker : PrimitivesBehaviours
{
    // Start is called before the first frame update
    void Start()
    {
        //Initialising the MeshFilter Component
        meshFilter = GetComponent<MeshFilter>();

        //Initialising the MeshRenderer Component
        meshRenderer = GetComponent<MeshRenderer>();

        if (size == new Vector3(0, 0, 0))
        {
            size = Vector3.one;
        }

        meshSize = 1;

        if (primitiveColour == new Color(0.0f, 0.0f, 0.0f, 0.0f))
        {
            primitiveColour = Color.yellow;
        }

        //Initialising the MeshGenerator and passing the meshsize as parameter since the cube is going to contain 6 faces but they are all going to contain the same colour
        meshGenerator = new MeshGenerator(meshSize);

        //Calling the cube generator method
        GenerateCube();
    }

    //A method to create the cube
    public void GenerateCube()
    {
        //Top vertices
        Vector3 ttopLeft = new Vector3(-size.x, size.y, size.z);
        Vector3 ttopRight = new Vector3(size.x, size.y, size.z);
        Vector3 tbottomLeft = new Vector3(-size.x, size.y, -size.z);
        Vector3 tbottomRight = new Vector3(size.x, size.y, -size.z);

        //Bottom vertices
        Vector3 btopLeft = new Vector3(-size.x, -size.y, size.z);
        Vector3 btopRight = new Vector3(size.x, -size.y, size.z);
        Vector3 bbottomLeft = new Vector3(-size.x, -size.y, -size.z);
        Vector3 bbottomRight = new Vector3(size.x, -size.y, -size.z);

        //Top Square
        meshGenerator.BuildTriangle(ttopLeft, ttopRight, tbottomRight, 0);
        meshGenerator.BuildTriangle(ttopLeft, tbottomRight, tbottomLeft, 0);

        //Bottom Square
        meshGenerator.BuildTriangle(btopRight, btopLeft, bbottomLeft, 0);
        meshGenerator.BuildTriangle(btopRight, bbottomLeft, bbottomRight, 0);

        //Left-side Square
        meshGenerator.BuildTriangle(ttopLeft, tbottomLeft, bbottomLeft, 0);
        meshGenerator.BuildTriangle(ttopLeft, bbottomLeft, btopLeft, 0);

        //Right-side Square
        meshGenerator.BuildTriangle(tbottomRight, ttopRight, btopRight, 0);
        meshGenerator.BuildTriangle(tbottomRight, btopRight, bbottomRight, 0);

        //Front Square
        meshGenerator.BuildTriangle(tbottomLeft, tbottomRight, bbottomRight, 0);
        meshGenerator.BuildTriangle(tbottomLeft, bbottomRight, bbottomLeft, 0);

        //Back Square
        meshGenerator.BuildTriangle(ttopRight, ttopLeft, btopLeft, 0);
        meshGenerator.BuildTriangle(ttopRight, btopLeft, btopRight, 0);

        //Specify the MeshFilter generated by the MeshGenerator
        meshFilter.mesh = meshGenerator.MeshCreator();

        //Calling the method to be able to populate the list
        IncludeMaterials();

        //Converting the list of materials to an array and assign it to the materials in the MehshRenderer
        meshRenderer.materials = listOfMaterials.ToArray();
    }
}
