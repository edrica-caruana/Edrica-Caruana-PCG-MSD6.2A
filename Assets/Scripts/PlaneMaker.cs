using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class PlaneMaker : PrimitivesBehaviours
{
    // Start is called before the first frame update
    void Start()
    {
        //Initialising the MeshFilter Component
        meshFilter = GetComponent<MeshFilter>();

        //Initialising the MeshRenderer Component
        meshRenderer = GetComponent<MeshRenderer>();

        meshSize = 1;

        cellSize = 1f;

        widthPlane = 31;

        heightPlane = 31;

        if(primitiveColour == new Color(0.0f, 0.0f, 0.0f, 0.0f))
        {
            primitiveColour = Color.blue;
        }

        //Initialising the MeshGenerator and passing the meshsize as parameter since the plane is going to contain 1 submesh
        meshGenerator = new MeshGenerator(meshSize);

        //Calling the plane generator method
        GeneratePlane();
    }

    // Update is called once per frame
    void Update()
    {
        
    }

    //A method to create the plane
    void GeneratePlane()
    {
        Vector3[,] planePoints = new Vector3[widthPlane, heightPlane];

        //Create plane points
        for (int row = 0; row < widthPlane; row++)
        {
            for(int column = 0; column < heightPlane; column++)
            {
                planePoints[row, column] = new Vector3(cellSize * row, 0, cellSize * column);
            }
        }

        //Create plane quads
        for(int x = 0; x < widthPlane - 1; x++)
        {
            for(int y = 0; y < heightPlane - 1; y++)
            {
                Vector3 bottomLeft = planePoints[x,y];
                Vector3 bottomRight = planePoints[x + 1, y];
                Vector3 topLeft = planePoints[x, y + 1];
                Vector3 topRight = planePoints[x + 1, y + 1];

                meshGenerator.BuildTriangle(topLeft, topRight, bottomRight, 0);
                meshGenerator.BuildTriangle(topLeft, bottomRight, bottomLeft, 0);
            }
        }

        //Specify the MeshFilter generated by the MeshGenerator
        meshFilter.mesh = meshGenerator.MeshCreator();

        //Calling the method to be able to populate the list
        IncludeMaterials();

        //Converting the list of materials to an array and assign it to the materials in the MehshRenderer
        meshRenderer.materials = listOfMaterials.ToArray();
    }
}
